// middleware.ts

import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';

export async function middleware(request: NextRequest) {
  let response = NextResponse.next({
    request: { headers: request.headers },
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) { return request.cookies.get(name)?.value },
        set(name, value, options) {
          request.cookies.set({ name, value, ...options });
          response = NextResponse.next({ request: { headers: request.headers } });
          response.cookies.set({ name, value, ...options });
        },
        remove(name, options) {
          request.cookies.set({ name, value: '', ...options });
          response = NextResponse.next({ request: { headers: request.headers } });
          response.cookies.set({ name, value: '', ...options });
        },
      },
    }
  );

  const { data: { user } } = await supabase.auth.getUser();
  const { pathname } = request.nextUrl;

  // Jika pengguna sudah login
  if (user) {
    const { data: profile } = await supabase
      .from('profiles')
      .select('role, has_selected_role')
      .eq('id', user.id)
      .single();

    const role = profile?.role;
    const hasSelectedRole = profile?.has_selected_role;
    const isChoosingRole = pathname === '/auth/choose-role';

    // Arahkan ke dasbor yang benar berdasarkan peran
    const umkmDashboard = '/umkm/dashboard';
    const investorDashboard = '/investor/dashboard';
    const correctDashboard = role === 'investor' ? investorDashboard : umkmDashboard;

    // 1. Logika untuk pengguna baru: paksa pilih peran
    if (!hasSelectedRole && !isChoosingRole) {
      return NextResponse.redirect(new URL('/auth/choose-role', request.url));
    }

    // 2. Jika sudah memilih peran, jangan biarkan kembali ke halaman pilih peran
    if (hasSelectedRole && isChoosingRole) {
      return NextResponse.redirect(new URL(correctDashboard, request.url));
    }

    // 3. Jika sudah login, jangan biarkan mengakses halaman login/register
    if (pathname === '/login' || pathname === '/register') {
      return NextResponse.redirect(new URL(correctDashboard, request.url));
    }

    // 4. Aturan routing utama berdasarkan peran
    if (role === 'umkm' && pathname.startsWith('/investor')) {
      return NextResponse.redirect(new URL(umkmDashboard, request.url));
    }
    if (role === 'investor' && pathname.startsWith('/umkm')) {
      return NextResponse.redirect(new URL(investorDashboard, request.url));
    }

  } else {
    // 5. Jika belum login, lindungi semua halaman dasbor
    const protectedRoutes = ['/umkm', '/investor', '/auth/choose-role'];
    if (protectedRoutes.some(route => pathname.startsWith(route))) {
        return NextResponse.redirect(new URL('/login', request.url));
    }
  }

  return response;
}

export const config = {
  matcher: [
    // Jalankan middleware di semua halaman kecuali file statis dan API routes
    '/((?!_next/static|_next/image|favicon.ico|api/).*)',
  ],
};